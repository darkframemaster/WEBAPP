##library:
[for python3](https://docs.python.org/3/library/inspect.html)
[lib for aiohttp](http://aiohttp.readthedocs.org/en/stable/web.html)
[lib for jinja2](http://docs.jinkan.org/docs/jinja2/api.html#id1)

##about mysql
`grant select,insert,update,delete on darkframexue.* to 'root'@'localhost' identified by 'xh1008'`	为数据库授权

the attribute in db must as same as the attrs in the class in models

##about python
###about aiohttp
####handler
一个request handler可以是任何一个函数（也可以是协程）只接受request作为它的参数，完了返回一个StreamResponse对象。

```
def handler(request):
    return web.Response()
```
####Middleware:
middlewares 由一系列的工厂构成，在web.Application中作为一个键值传入，一个factory就是一个执行中间逻辑的协程。aiohttp.web通过middleware提供了一个定制request handler的机制。

middlewares的参数有两个，`(app,handler)`。

通过在一个中间件工厂的处理程序是由上一个中间件工厂返回的处理程序。最后一个中间件工厂总是接收路由器本身选择的请求处理程序。

```
async def middleware_factory(app, handler):
    async def middleware_handler(request):
        return await handler(request)
    return middleware_handler
```

####web.Application(loop,middlewares=[factory1,factory2])


###about jinja2

###about middlewares

###about yield 
如果一个函数里面包含yield字段，那么这个函数已经编程了一个生成器`Generator`

```
def h():
	print 'Are you OK'
	yield 1
	print 'i am fine thank you'

c=h()
c.next()
```

在python2.x的版本中测试上述代码，结果只打印了`you`。大家可以输出`h()`的类型查看，会发现它是一个Generator...上面的代码中`c=h()`是将`h()`赋值给了c，对，也就是将Generator赋值给了c,所以没有打印出`you`的字段。

ok,我们再输入`c.next()`，我们得到了`and me`的字段，然后竟然报错啦，我去...好吧，其实这是因为再次调用`c.next()`时，会继续执行，直到找到下一个`yield`表达式。由于后面没有`yield`了，因此会拋出异常：`StopIterration`。

再来一发:

```
def h():
	print 'Are you OK'
	m=yield 2
	print m
	n=yield 3
	print 'i am fine thank you'

c=h()
c.next()
c.send('Fighting!')
'''

看到结果相信大家都知道了,`send('Fighting')`把`'Fighting!'`传给了`yield`，然后继续输出直到下一个yield。没错，`send()`就像一个有参数的`next()。

自己打印出`c.next()`和`c.send('string')`的值，看看它们是什么。

###about coroutine

###about not 
定义一个函数

```
def test(n):
    if not n and n:
           print('first if')
    if not n and not n:
           print('second if')   

test(True)
test(False)
```


