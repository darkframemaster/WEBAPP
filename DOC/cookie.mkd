##Cookie
Cookie:服务器给客户端颁发的通行证，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。

Cookie实际上是一小段文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。

查看某个网站颁发的Cookie很简单。在浏览器地址栏输入`javascript:alert (document. cookie)`就可以了。

>注意：Cookie功能需要浏览器的支持。

###Cookie的不可跨域名性
Cookie在客户端是由浏览器来管理的。浏览器能够保证Google只会操作Google的Cookie而不会操作Baidu的Cookie，从而保证用户的隐私安全。浏览器判断一个网站是否能操作另一个网站Cookie的依据是域名。Google与Baidu的域名不一样，因此Google不能操作Baidu的Cookie。

###Cookie常用属性
<table border="0.5">
    <tr>
        <th>属性名</th>
        <th>描述</th>
    </tr>
    <tr><td>String name:</td><td>该Cookie的名称。Cookie一旦创建名称就不能更改</td></tr>
    <tr><td>Object:</td><td>该Cookie的值。</td></tr>
    <tr><td>int maxAge:</td><td>该Cookie失效的时间，单位秒。如果为正数，Cookie将在maxAge之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器失效，浏览器不用任何形式保存该Cookie。如果为0,表示删除该Cookie，默认为-1。</td></tr>
    <tr><td>boolean secure:</td><td>该Cookie是否被使用安全协议传输。安全协议有HTTPS，SSL，默认为false </td></tr>
    <tr><td>String path:</td><td>Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”</td></tr>
    <tr><td>String domain:</td><td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”</td></tr>
    <tr><td>String comment:</td><td>该Cookie的用处说明。浏览器显示Cookie信息时显示。</td></tr>
    <tr><td>int version:</td><td>该Cookie的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范。</td></tr>
</table>

###Cookie的有效期
Cookie中通过getMaxAge()方法与setMaxAge(int maxAge)方法来读写maxAge属性。

response对象提供的Cookie操作方法只有一个添加操作add(Cookie cookie)。修改之后必须调用该函数才能同步到客户端。

要想修改Cookie只能使用一个同名的Cookie来覆盖原来的Cookie，达到修改的目的。删除时只需要把maxAge修改为0即可。

>注意：修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。

###Cookie的域名
正常情况下，同一个一级域名下的两个二级域名如www.helloweenvsfei.com和images.helloweenvsfei.com也不能交互使用Cookie，因为二者的域名并不严格相同。如果想所有helloweenvsfei.com名下的二级域名都可以使用该Cookie，需要设置Cookie的domain参数。

```
Cookie cookie = new Cookie("time","20080808"); // 新建Cookie
cookie.setDomain(".helloweenvsfei.com");           // 设置域名
cookie.setPath("/");                              // 设置路径
cookie.setMaxAge(Integer.MAX_VALUE);               // 设置有效期
response.addCookie(cookie);                       // 输出到客户端
```

>注意：domain参数必须以点(".")开始。

###Cookie的路径
而path属性决定允许访问Cookie的路径（ContextPath）。例如，如果只允许/sessionWeb/下的程序使用Cookie，可以这么写：

```
Cookie cookie = new Cookie("time","20080808");     // 新建Cookie
cookie.setPath("/session/");                          // 设置路径
response.addCookie(cookie);                           // 输出到客户端
```

>path属性需要使用符号“/”结尾。设置为“/”时允许所有路径使用Cookie。

###Cookie的安全属性
HTTP协议不仅是无状态的，而且是不安全的。使用HTTP协议的数据不经过任何加密就直接在网络上传播，有被截获的可能。使用HTTP协议传输很机密的内容是一种隐患。如果不希望Cookie在HTTP等非安全协议中传输，可以设置Cookie的secure属性为true。浏览器只会在`HTTPS`和`SSL`等安全协议中传输此类Cookie。下面的代码设置secure属性为true：

```
Cookie cookie = new Cookie("time", "20080808"); // 新建Cookie
cookie.setSecure(true);                           // 设置安全属性
response.addCookie(cookie);                        // 输出到客户端
```

>提示：secure属性并不能对Cookie内容加密，因而不能保证绝对的安全性。如果需要高安全性，需要在程序中对Cookie内容加密、解密，以防泄密。