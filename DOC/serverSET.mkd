##部署Web App
###搭建linux服务器
* Amazon上申请 一台EC2虚拟机。[AWS](http://aws.amazon.com/)
* 在本地安装

版本：Ubuntu 2015.10 LTS。

linux安装好之后，确保ssh服务正在运行，否则，需要通过apt安装:

`sudo apt-get install openssh-server`

有了ssh服务，就可以从本地连接到服务器上。建议把公钥复制到服务器端用户的`.ssh/authorized_keys`中，这样，就可以通过证书实现无密码连接。

###部署方式
我们还需要一个高性能的Web服务器，这里选择Nginx，它可以处理静态资源，同时作为反向代理把动态请求交给Python代码处理。

在服务器端，定义好部署的目录结构

```
/
+- srv/
   +- awesome/       <-- Web App根目录
      +- www/        <-- 存放Python源码
      |  +- static/  <-- 存放静态资源文件
      +- log/        <-- 存放log
```

在服务器上部署，要考虑到新版本如果运行不正常，需要回退到旧版本时怎么办。每次用新的代码覆盖掉旧的文件是不行的，需要一个类似版本控制的机制。由于Linux系统提供了软链接功能，所以，我们把`www`作为一个软链接，它指向哪个目录，哪个目录就是当前运行的版本：

而Nginx和gunicorn的配置文件只需要指向www目录即可。

Nginx可以作为服务进程直接启动，但gunicorn还不行，所以，Supervisor登场！Supervisor是一个管理进程的工具，可以随系统启动而启动服务，它还时刻监控服务进程，如果服务进程意外退出，Supervisor可以自动重启服务。

总结一下我们需要用到的服务有：

* Nginx：高性能Web服务器+负责反向代理；
* Supervisor：监控服务进程的工具；
* MySQL：数据库服务。

在linux服务器上用apt可以直接安装上述服务：

`sudo apt-get install nginx supervisor python3 mysql-server`

然后，再把我们自己的WEBAPP用到的Python库安装了：

`sudo pip3 install jinja2 aiomysql aiohttp`

在服务器上创建目录/srv/WEBAPP/以及响应的子目录。

在服务器上初始化MySQL数据库，把数据库初始化脚本输出schema.sql复制到服务器上运行:

`mysql -u root -p<schema.sql`

服务器端准备就绪。

###部署
用FTP还是SCP还是rsync复制文件？如果你需要手动复制，用一次两次还行，一天如果部署50次不但慢、效率低，而且容易出错。

正确的部署方式是使用工具配合脚本完成自动化部署。Fabric就是一个自动化部署工具。由于Fabric是用Python 2.x开发的，所以，部署脚本要用Python 2.7来编写，本机还必须安装Python 2.7版本。

要用Fabric部署，需要在本机**（是开发机器，不是Linux服务器）**安装Fabric：

`easy_install fabric`

Linux服务器上不需要安装Fabric，Facbric使用SSH直接登录服务器并执行部署命令。

```
WEBAPP/
+-fabfile.py
+-www/
+-...
```

Fabric的脚本编写参考`fabfile.py`


